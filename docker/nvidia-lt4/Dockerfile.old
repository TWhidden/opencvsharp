#FROM nvcr.io/nvidia/deepstream-l4t:base AS build-native-env
FROM nvcr.io/nvidia/l4t-base:r32.2.1 AS build-native-env

ENV OPENCV_VERSION=master

RUN apt-get update && apt-get install -y \
    apt-transport-https \
    software-properties-common \
    wget \
    unzip \
    curl \
    ca-certificates
    #bzip2 \
    #grep sed dpkg 

# Install opencv dependencies
RUN cd ~
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    gfortran \
    libjpeg8-dev \
    libpng-dev \
    software-properties-common



# libjaspter1 is needed by OpenCV, but not in this nvidia build container
RUN wget http://launchpadlibrarian.net/376191785/libjasper1_1.900.1-debian1-2.4ubuntu1.2_arm64.deb && dpkg -i libjasper1_1.900.1-debian1-2.4ubuntu1.2_arm64.deb

RUN apt-get install -y \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libdc1394-22-dev \
    libxine2-dev \
    libv4l-dev

RUN cd /usr/include/linux
RUN ln -s -f ../libv4l1-videodev.h videodev.h
RUN cd ~
RUN apt-get install -y \
    libgtk2.0-dev \
    libtbb-dev \
    qt5-default \
    libatlas-base-dev \
    libfaac-dev \
    libmp3lame-dev \
    libtheora-dev \
    libvorbis-dev \
    libxvidcore-dev \
    libopencore-amrnb-dev \
    libopencore-amrwb-dev \
    libavresample-dev \
    x264 \
    v4l-utils

# COPY OpenCV-4.1.2-147-gb6a58818bb-aarch64-*.deb /home/

# RUN cd /home \
#   && apt-get install libaec0 libgflags2.2 libgoogle-glog0v5 libhdf5-100 libsz2 -y \
#   && dpkg -i OpenCV-4.1.2-147-gb6a58818bb-aarch64-libs.deb \
#   && dpkg -i OpenCV-4.1.2-147-gb6a58818bb-aarch64-dev.deb \
#   && dpkg -i OpenCV-4.1.2-147-gb6a58818bb-aarch64-licenses.deb \
#   && dpkg -i OpenCV-4.1.2-147-gb6a58818bb-aarch64-main.deb 


# Setup OpenCV source
RUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \
    unzip ${OPENCV_VERSION}.zip && \
    rm ${OPENCV_VERSION}.zip && \
    mv opencv-${OPENCV_VERSION} opencv

# Setup opencv-contrib Source
RUN wget https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip && \
    unzip ${OPENCV_VERSION}.zip && \
    rm ${OPENCV_VERSION}.zip && \
    mv opencv_contrib-${OPENCV_VERSION} opencv_contrib

#RUN sed -i 's/include <Eigen\/Core>/include <eigen3\/Eigen\/Core>/g' opencv/modules/core/include/opencv2/core/private.hpp

RUN echo LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda/lib64:/usr/local/cuda/bin

COPY cuda/lib64 /usr/local/cuda-10.0/

# Build OpenCV
RUN cd opencv && mkdir build && cd build && \
    cmake \
    -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
    -D CMAKE_BUILD_TYPE=RELEASE \
    -D BUILD_SHARED_LIBS=OFF \
    -D ENABLE_CXX11=ON \
    -D BUILD_EXAMPLES=OFF \
    -D BUILD_DOCS=OFF \
    -D BUILD_PERF_TESTS=OFF \
    -D BUILD_TESTS=OFF \
    -D BUILD_JAVA=OFF \
    -D BUILD_opencv_app=OFF \
    -D BUILD_opencv_java=OFF \
    -D BUILD_opencv_python=OFF \
    -D BUILD_opencv_ts=OFF \
    -D BUILD_opencv_js=OFF \
    -D WITH_GSTREAMER=OFF \ 
    -D WITH_LIBV4L=ON \
    -D WITH_FFMPEG=OFF \
    -D OPENCV_ENABLE_NONFREE=OFF \
    -D WITH_CUDA=ON \
    -D CUDA_ARCH_BIN="5.3,6.2,7.2" \
    -D CUDA_ARCH_PTX="" \
    .. && make -j4 && make install && ldconfig

WORKDIR /

# Download OpenCvSharp
RUN git clone https://github.com/shimat/opencvsharp.git
RUN cd opencvsharp && git fetch --all --tags --prune

# Install the Extern lib.
WORKDIR /opencvsharp/src
RUN mkdir /opencvsharp/make
RUN cd /opencvsharp/make && cmake -D CMAKE_INSTALL_PREFIX=/opencvsharp/make /opencvsharp/src && make -j4 && make install
RUN ls /opencvsharp/make

FROM mcr.microsoft.com/dotnet/core/sdk:3.0-bionic-arm64v8 AS build-dotnet-env
COPY --from=build-native-env /opencvsharp/make/OpenCvSharpExtern/libOpenCvSharpExtern.so ./
RUN git clone https://github.com/shimat/opencvsharp.git
RUN pwd
RUN ls

# Install Build the C# part of OpenCvSharp
WORKDIR /opencvsharp/src/OpenCvSharp
RUN cd /opencvsharp/src/OpenCvSharp
RUN dotnet build -c Release -f netstandard2.0 

WORKDIR /opencvsharp/src/OpenCvSharp.Blob
RUN cd /opencvsharp/src/OpenCvSharp.Blob
RUN dotnet build -c Release -f netstandard2.0 

WORKDIR /opencvsharp/src/OpenCvSharp.Extensions
RUN cd /opencvsharp/src/OpenCvSharp.Extensions
RUN dotnet build -c Release -f netstandard2.0 

RUN mkdir /opencvsharp/build
WORKDIR /opencvsharp/build
RUN cp /libOpenCvSharpExtern.so .
RUN cp /opencvsharp/src/OpenCvSharp/bin/Release/netstandard2.0/* .
RUN cp /opencvsharp/src/OpenCvSharp.Blob/bin/Release/netstandard2.0/* .
RUN cp /opencvsharp/src/OpenCvSharp.Extensions/bin/Release/netstandard2.0/* .
RUN pwd
RUN ls





#FROM mcr.microsoft.com/dotnet/core/aspnet:3.0-bionic-arm64v8
FROM nvcr.io/nvidia/l4t-base:r32.2.1
WORKDIR /app
COPY --from=build-dotnet-env /opencvsharp/build ./
RUN pwd
RUN ls
#ENTRYPOINT ["ls"]


COPY OpenCV-4.1.2-147-gb6a58818bb-aarch64-*.deb /home/

RUN apt-get update \
  && apt-get install qt5-default libaec0 libgflags2.2 libgoogle-glog0v5 libhdf5-100 libsz2 -y


RUN cd /home \
  && dpkg -i OpenCV-4.1.2-147-gb6a58818bb-aarch64-libs.deb \
  && dpkg -i OpenCV-4.1.2-147-gb6a58818bb-aarch64-main.deb \
  && rm OpenCV-4.1.2-147-gb6a58818bb-aarch64-libs.deb \
  && rm OpenCV-4.1.2-147-gb6a58818bb-aarch64-main.deb 

